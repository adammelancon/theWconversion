
- how to read this mess - 

ARDUINO CODE FUNCTION
some arduino code

some links for reference

- python/circuitpython example code
some code here

GENERAL SITES
https://github.com/todbot/circuitpython-tricks
https://learn.adafruit.com/adafruit-metro-esp32-s2/circuitpython-internet-test
https://learn.adafruit.com/micropython-hardware-ssd1306-oled-display/circuitpython
https://learn.adafruit.com/neopixels-on-raspberry-pi/python-usage


INITALIZE WIFI
const char* ssid = "TIPP";
const char* password =  "xxxxxx";


https://learn.adafruit.com/adafruit-metro-esp32-s2/circuitpython-internet-test

- circuitpython
print("Connecting to %s"%secrets["ssid"])
wifi.radio.connect(secrets["ssid"], secrets["password"])
print("Connected to %s!"%secrets["ssid"])
print("My IP address is", wifi.radio.ipv4_address)


SHOW IP ADDRESS ON OLED

- circuitpython
oled.text("My IP address is," wifi.radio.ipv4_address, 0, 0)


INITIALIZE OLED DISPLAY
SSD1306Wire display(0x3c, 4, 5, GEOMETRY_128_64 )

https://learn.adafruit.com/micropython-hardware-ssd1306-oled-display/circuitpython

- circuitpython
import adafruit_ssd1306
i2c = io.I2C(board.SCL, board.SDA)
oled = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c, addr=0x3d)
oled.fill(0)
oled.text('Hello', 0, 0)
oled.text('World', 0, 10)
oled.show()


GET JSON DATA INTO DICTIONARY 

- python function in my code
get_wxstation_to_dict()


IF JSON RETURN CODE ISN'T 200 TURN LEDS RED



PARSE THE TIME FROM METAR STRING AND SET TIME OF DAY VARIABLE
SET LED BRIGHTNESS BASED ON TIME OF DAY
NIGHT MODE = 5
DAY MODE = 64

- python
will be found in 
time_of_day = int(station_wx_dict['obsTime'][-9:-7]) - UTC_OFFSET

tested with
print(f"Time of day test: {int(station_wx_dict['obsTime'][-9:-7]) - UTC_OFFSET}")


SEEDS FOR SCREENSAVER
int cl = 0; // lower pixel limit
int cu = 254; // upper pixel limit
int LEDg = 0; // LEDg (Green) value
int pixel = 0; // pixel number


DEFINE NEOPIXEL PIN and SETUP NEOPIXELS
include <Adafruit_NeoPixel.h>  #define PIN 13
Adafruit_NeoPixel strip = Adafruit_NeoPixel(18, PIN, NEO_RGB + NEO_KHZ800); // W 8211 LEDs

Adafruit_Blinka library that provides the CircuitPython support in Python
https://learn.adafruit.com/neopixels-on-raspberry-pi/python-usage


- CircuitPython
import board
import neopixel
pixels = neopixel.NeoPixel(board.D18, #oflights)


SETUP COLOR VARIABLES
pixColor;
SuperCold = strip.Color(0, 0, 100);
Cold = strip.Color(0, 100, 100);
Cool = strip.Color(0, 100, 50);
Normal = strip.Color(0, 100, 0);
Warm = strip.Color(100,0,50);
Hot = strip.Color(100, 0, 0);
error = strip.Color(255, 255, 255);  // error state wifi

-in python
SUPERCOLD = (0, 0, 100)
COLD = (0, 100, 100)
COOL = (0, 100, 50)
NORMAL = (0, 100, 0)
WARM = (100,0,50)
HOT = (100, 0, 0)
ERROR = (255, 255, 255)  # error state wifi






SET LED COLOR BASED ON TIME OF DAY
  if (c < 4) {pixColor = SuperCold;}
  else if (c < 15) {pixColor = Cold;}
  else if (c < 18) {pixColor = Cool;}
  else if (c < 29) {pixColor = Normal;}
  else if (c <= 32) {pixColor = Warm;}
  else if (c > 32) {pixColor = Hot;}

}



SET LED PATTERNS BASED ON WX
scattered day 
// Set first five (every other) white (clouds)
  strip.setPixelColor(0, 50,50,50);
  strip.setPixelColor(1, 0,0,0);
  strip.setPixelColor(2, 50,50,50);
  strip.setPixelColor(3, 0,0,0);
  strip.setPixelColor(4, 50,50,50);

clear day
{
  for(int i=0; i<19; i++)  // Set all pixels same color
     {
      strip.setPixelColor(i, pixColor);
     }
  strip.show();
  delay(wt); 
}

overcast
{
  for(int i=0; i<19; i++)  // Set all pixels same color
     {
      strip.setPixelColor(i, pixColor);
     }
  strip.show();
  delay(wt); 
}

rain pattern 
void rainPattern(int rateRain) // Its raining outside
{
    int r[]={7, 8, 15, 16, 5, 11, 12, 17, 6, 9, 14, 16, 6, 10, 13, 17}; // Rain pattern based on physical layout

    
    for(int i=0; i<6; i++)  // Set first five white (clouds)
    {
      strip.setPixelColor(i, 50, 50, 50);
    } 

    for(int x=0; x<450; x++) // loop rain for 450 times ~15 minutes
    {
      
      for(int i=0; i<17; i++) // step through the pattern
      {
        if (i == 0){strip.setPixelColor(r[14], 0, 0, 0);} //set second last pixel off
        if (i == 1){strip.setPixelColor(r[15], 0, 0 ,0);} //set last pixel off
        strip.setPixelColor(r[i], pixColor);
        strip.setPixelColor(r[i-1], 0);
        strip.show();
        delay(rateRain);
      }
    }    
}




MAKE A SCREENSAVER
for(int i=0; i<19; i++) // Clear LEDs
    {
      strip.setPixelColor(i, 0, 0, 0);
      strip.show();
    } 
 
for (int x = 0; x < 500; x = x + 1) // loop for x times
    { 
      
    pixel = random(18);  // pick a random pixel
    cu = random(50, 100); // upper random limit
    cl = random(1, 3); // lower random limit
    LEDg = (strip.getPixelColor(pixel) >> 8); // read current LEDg pixel value
    
    display.clear();
    display.setFont(ArialMT_Plain_10);
    display.drawString(pixel * 2, pixel, (String("Screensaver Mode")));
    display.display();

   if (LEDg <= 127) {
      do {
       LEDg = LEDg + 1; // fade current to up upper limit
     
      strip.setPixelColor(pixel, 0, LEDg, 0); // set value to pixel
      strip.show();
      // Serial.println(String("Fade to Upper Pix: ") + pixel + " LEDg: " + LEDg);
      
      delay(d);
      } while (LEDg < cu);
   }
    else {
      do {
      LEDg = LEDg - 1; // fade current to up upper limit
      strip.setPixelColor(pixel, 0, LEDg, 0); // set value to pixel
      strip.show();
      // Serial.println(String("Fade to Lower Pix: ") + pixel + " LEDg: " + LEDg);
      
      delay(d);
      } while (LEDg > cl);
    }

   } // close for x loop



CLEARING OLED SCREEN
pinMode(16, OUTPUT); // little code dance to reset the SSD1306 OLED via hardware
digitalWrite(16, LOW);
delay(50);
digitalWrite(16, HIGH);




SCREEN ROTATION AND FONT SELECTION
display.init();
display.flipScreenVertically();
display.setFont(ArialMT_Plain_10);



TURN OFF ALL NEOPIXELS  
for(int i=0; i<18; i++) // Turn all LED's off
    {
      strip.setPixelColor(i, 0, 0, 0);
      strip.show();
    } 




RUN LED FUNCTION BASED ON WX 
    if (conditions == "RAIN") {
      rainPattern(200);
    }
    else if(conditions == "DRIZZLE") {
      rainPattern(400);
    }
    else if(conditions == "OVERCAST") {
      overcastDay();
    }
    else if(conditions == "FOGGY") {
      foggyDay();
    }
    else if(conditions == "SCATTERED") {
      scatteredDay();
    }
    else if(conditions == "CLEAR") {
      clearDay();
    }
    else if(conditions == "UNSET") {
      clearDay();
    }




SET CONDITION NAME BASED ON ABBREVIATIONS
  if (metar.indexOf("RA") >= 0)
     {
      conditions = "RAIN";
     }
     
  else if (metar.indexOf("DZ") >= 0)
     {
      conditions = "DRIZZLE";
     }
     
  else if (metar.indexOf("CLR") >= 0)
     {
      conditions = "CLEAR";
     }
  
  else if (metar.indexOf("FG") >= 0)
     {
      conditions = "FOGGY";
     } 
     
  else if (metar.indexOf("OVC") >= 0)
     {
      conditions = "OVERCAST";
     }
        
  else if (metar.indexOf("SCT") >= 0)
     {
      conditions = "SCATTERED";
     }




DISPLAY TEMP AND WIND SPEED ON OLED AS DEFAULT
{
  display.clear(); // Clear the OLED and print the following
  display.setFont(ArialMT_Plain_10); // here for debugging purposes
//  display.setFont(Dialog_plain_48); // normal size font
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.drawString(64, 15, (String("")) + currentTemp  + "c");
  delay(5000);
  display.clear();
  display.drawString(64, 15, (String("")) + windSpeed  + "k");